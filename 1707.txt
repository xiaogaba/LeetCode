class Solution {
    class TrieNode {
        TrieNode[] children;
        public TrieNode() {
            children = new TrieNode[2];
        }
    }
    TrieNode root;
    public int[] maximizeXor(int[] nums, int[][] queries) {
        int n = nums.length;
        int index = 0;
        root = new TrieNode();
        int[][] dic = new int[queries.length][3];
        for (int i = 0; i < queries.length; ++i) {
            dic[i][0] = queries[i][0];
            dic[i][1] = queries[i][1];
            dic[i][2] = i;
        }
        int[] res = new int[dic.length];
        Arrays.sort(nums);
        Arrays.sort(dic, (o1, o2) -> o1[1] - o2[1]);
        for (int i = 0; i < dic.length; ++i) {
            while (index < n && nums[index] <= dic[i][1]) {
                add(nums[index]);
                index ++;
            }
            if (nums[0] > dic[i][1]) {
                res[dic[i][2]] = -1;
            } else {
                res[dic[i][2]] = max_ans(dic[i][0]);
            }
        }
        return res;
    }
    public void add(int num){
        TrieNode curNode = root;
        for(int i = 31; i >= 0; i --) {
            int curBit = (num >>> i) & 1;
            if(curNode.children[curBit] == null) {
                curNode.children[curBit] = new TrieNode();
            }
            curNode = curNode.children[curBit];
        }
    }


    public int max_ans(int num){
        TrieNode curNode = root;
        int curSum = 0;
        for(int i = 31; i >= 0; i --) {
            int curBit = (num >>> i) & 1;
            if(curNode ==null || curNode.children==null)
                break;
            if(curNode.children[curBit ^ 1] != null) {
                curSum += (1 << i);
                curNode = curNode.children[curBit ^ 1];
            }else {
                curNode = curNode.children[curBit];
            }
        }

        return curSum;
    }
}