class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();
        if (words == null || words.length < 2)
            return res;
        Map<String, Integer> mp = new HashMap<>();
        for (int i = 0; i < words.length; ++i) {
            mp.put(words[i], i);
        }
        for (int i = 0; i < words.length; ++i) {
            for (int j = 0; j <= words[i].length(); ++j) {
                String str1 = words[i].substring(0, j);
                String str2 = words[i].substring(j);
                if (isPalindrome(str1)) {
                    String str2Rev = new StringBuilder(str2).reverse().toString();
                    if (mp.containsKey(str2Rev) && mp.get(str2Rev) != i && str1.length() != 0) {
                        List<Integer> ans = new ArrayList<>();
                        ans.add(mp.get(str2Rev));
                        ans.add(i);
                        res.add(ans);
                    }
                }
                if (isPalindrome(str2)) {
                    String str1Rev = new StringBuilder(str1).reverse().toString();
                    if (mp.containsKey(str1Rev) && mp.get(str1Rev) != i) {
                        List<Integer> ans = new ArrayList<>();
                        ans.add(i);
                        ans.add(mp.get(str1Rev));
                        res.add(ans);
                    }
                }
            }
        }
          return res;  
        
    }
    public boolean isPalindrome(String str) {
        int i = 0;
        int j = str.length() - 1;
        while (i < j){
            if (str.charAt(i) != str.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
    
}