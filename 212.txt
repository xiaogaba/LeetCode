class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        TrieNode p = buildTrie(words);
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) {
                backTracking(res, p, board, i, j);
            }
        }
        return res;
    }
    
     public void backTracking(List<String> res, TrieNode p,char[][] board, int i, int j) {
        char c = board[i][j];
        if (c == '#' || p.next[c - 'a'] == null)
            return;
        p = p.next[c - 'a'];
        if (p.word != null) {
            res.add(p.word);
            p.word = null;
        }
        board[i][j] = '#';
        if (i - 1 >= 0) {
            backTracking(res, p, board, i - 1, j);
        }
        if (i + 1 < board.length) {
            backTracking(res, p, board, i + 1, j);
        }
        if (j  - 1 >= 0) {
            backTracking(res, p, board, i, j - 1);
        }
        if (j + 1 < board[0].length) {
            backTracking(res, p, board, i, j + 1);
        }
        board[i][j] = c;
         
     }
    public TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String word: words) {
            TrieNode p = root;
            for (char c: word.toCharArray()) {
                if (p.next[c - 'a'] == null) {
                    p.next[c - 'a'] = new TrieNode();
                }
                p = p.next[c - 'a'];
            }
            p.word = word;
        }
        return root;
    }
    

    class TrieNode {
        TrieNode[] next = new TrieNode[26];
        String word;
    }
    

}